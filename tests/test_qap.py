import numpy as np
import pytest

from qubingx.cop.qap import QAP


@pytest.fixture
# nug5
def distance_mtx():
    return np.array(
        [[0, 1, 1, 2, 3], [1, 0, 2, 1, 2], [1, 2, 0, 1, 2], [2, 1, 1, 0, 1], [3, 2, 2, 1, 0]]
    )


@pytest.fixture
# nug5
def weight_mtx():
    return np.array(
        [[0, 5, 2, 4, 1], [5, 0, 3, 0, 2], [2, 3, 0, 0, 0], [4, 0, 0, 0, 5], [1, 2, 0, 5, 0]]
    )


@pytest.fixture
def instance(weight_mtx, distance_mtx):
    return QAP(
        weight_mtx=weight_mtx,
        distance_mtx=distance_mtx,
        alpha=np.max(distance_mtx) * np.max(weight_mtx),
    )


def test_make_h_obj(instance):
    expected_h_obj = np.array(
        [
            [0, 0, 0, 0, 0, 0, 10, 4, 8, 2, 0, 10, 4, 8, 2, 0, 20, 8, 16, 4, 0, 30, 12, 24, 6],
            [0, 0, 0, 0, 0, 10, 0, 6, 0, 4, 10, 0, 6, 0, 4, 20, 0, 12, 0, 8, 30, 0, 18, 0, 12],
            [0, 0, 0, 0, 0, 4, 6, 0, 0, 0, 4, 6, 0, 0, 0, 8, 12, 0, 0, 0, 12, 18, 0, 0, 0],
            [0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 8, 0, 0, 0, 10, 16, 0, 0, 0, 20, 24, 0, 0, 0, 30],
            [0, 0, 0, 0, 0, 2, 4, 0, 10, 0, 2, 4, 0, 10, 0, 4, 8, 0, 20, 0, 6, 12, 0, 30, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 8, 16, 4, 0, 10, 4, 8, 2, 0, 20, 8, 16, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 8, 10, 0, 6, 0, 4, 20, 0, 12, 0, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 4, 6, 0, 0, 0, 8, 12, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 20, 8, 0, 0, 0, 10, 16, 0, 0, 0, 20],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 0, 20, 0, 2, 4, 0, 10, 0, 4, 8, 0, 20, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 8, 2, 0, 20, 8, 16, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 4, 20, 0, 12, 0, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0, 0, 0, 8, 12, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 16, 0, 0, 0, 20],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 10, 0, 4, 8, 0, 20, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 8, 2],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 6, 0, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 10, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
    )
    assert (instance.h_obj == expected_h_obj).all()


def test_make_h_constraint(instance):
    expected_h_constraint = np.array(
        [
            [-30, 30, 30, 30, 30, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0],
            [0, -30, 30, 30, 30, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0],
            [0, 0, -30, 30, 30, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0],
            [0, 0, 0, -30, 30, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0],
            [0, 0, 0, 0, -30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30],
            [0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 0, 0, 0, 0, 30, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 0, 30, 0, 0, 0, 0, 30, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 0, 0, 30, 0, 0, 0, 0, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 0, 0, 0, 30, 0, 0, 0, 0, 30, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 30, 0, 0, 0, 0, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 0, 30, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 0, 0, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 0, 0, 0, 30, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30],
        ]
    )
    assert (instance.h_constraint == expected_h_constraint).all()


def test_make_h_all(instance):
    expected_h_all = np.array(
        [
            [-30, 30, 30, 30, 30, 30, 10, 4, 8, 2, 30, 10, 4, 8, 2, 30, 20, 8, 16, 4, 30, 30, 12, 24, 6],
            [0, -30, 30, 30, 30, 10, 30, 6, 0, 4, 10, 30, 6, 0, 4, 20, 30, 12, 0, 8, 30, 30, 18, 0, 12],
            [0, 0, -30, 30, 30, 4, 6, 30, 0, 0, 4, 6, 30, 0, 0, 8, 12, 30, 0, 0, 12, 18, 30, 0, 0],
            [0, 0, 0, -30, 30, 8, 0, 0, 30, 10, 8, 0, 0, 30, 10, 16, 0, 0, 30, 20, 24, 0, 0, 30, 30],
            [0, 0, 0, 0, -30, 2, 4, 0, 10, 30, 2, 4, 0, 10, 30, 4, 8, 0, 20, 30, 6, 12, 0, 30, 30],
            [0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 20, 8, 16, 4, 30, 10, 4, 8, 2, 30, 20, 8, 16, 4],
            [0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 20, 30, 12, 0, 8, 10, 30, 6, 0, 4, 20, 30, 12, 0, 8],
            [0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 8, 12, 30, 0, 0, 4, 6, 30, 0, 0, 8, 12, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 16, 0, 0, 30, 20, 8, 0, 0, 30, 10, 16, 0, 0, 30, 20],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 4, 8, 0, 20, 30, 2, 4, 0, 10, 30, 4, 8, 0, 20, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 10, 4, 8, 2, 30, 20, 8, 16, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 10, 30, 6, 0, 4, 20, 30, 12, 0, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 4, 6, 30, 0, 0, 8, 12, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 8, 0, 0, 30, 10, 16, 0, 0, 30, 20],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 2, 4, 0, 10, 30, 4, 8, 0, 20, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30, 30, 10, 4, 8, 2],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 10, 30, 6, 0, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 4, 6, 30, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 8, 0, 0, 30, 10],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 2, 4, 0, 10, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30]
        ]
    )
    assert (instance.h_all == expected_h_all).all()
